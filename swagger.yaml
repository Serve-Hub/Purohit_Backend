openapi: 3.0.0
info:
  title: Purohit API
  description: API documentation for Purohit application.
  version: 1.0.0
  contact:
    name: Purohit Team
    email: Purohit@example.com
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: "Users"
    description: "Operations related to user registration, login, and OTP management"
  - name: "Admin"
    description: "Operations related to admin user management and control"
paths:
  /api/v1/users/register:
    post:
      tags:
        - "Users"
      summary: Register a new user
      description: Registers a new user with first name, last name, email, password, and contact.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The user's first name
                  example: John
                lastName:
                  type: string
                  description: The user's last name
                  example: Doe
                email:
                  type: string
                  description: The user's email address (optional)
                  example: johndoe@example.com
                password:
                  type: string
                  description: The user's password (optional for Google login)
                  example: password123
                contact:
                  type: string
                  description: The user's phone number (optional)
                  example: +1234567890
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input or missing required fields
        500:
          description: Internal server error

  /api/v1/users/auth/google:
    get:
      tags:
        - "Users"
      summary: Initiate Google OAuth login
      description: Redirects to Google OAuth for user authentication
      responses:
        302:
          description: Redirect to Google OAuth

  /api/v1/users/auth/google/callback:
    get:
      tags:
        - "Users"
      summary: Google OAuth callback
      description: Callback route after Google OAuth authentication
      responses:
        200:
          description: User authenticated via Google
        401:
          description: Unauthorized, Google authentication failed

  /api/v1/users/login:
    post:
      tags:
        - "Users"
      summary: Login user with username/email and password
      description: Logs in the user by providing the username/email and password. If credentials are valid, returns access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                password:
                  type: string
                  description: The user's password
                  example: password123
      responses:
        200:
          description: Login successful, returns access and refresh tokens
        401:
          description: Invalid credentials
        500:
          description: Internal server error

  /api/v1/users/register/sendEmailOTP:
    post:
      tags:
        - "Users"
      summary: Send OTP to email for registration
      description: Sends an OTP to the user's email for registration verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                token:
                  type: string
                  description: The token given during registration.
      responses:
        200:
          description: OTP sent successfully
        400:
          description: Invalid email or server error

  /api/v1/users/register/verifyOTP:
    post:
      tags:
        - "Users"
      summary: Verify OTP for registration
      description: Verifies the OTP sent to the user's email for registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                otp:
                  type: string
                  description: The OTP sent to the user's email
                  example: 123456
      responses:
        200:
          description: OTP verified successfully
        400:
          description: Invalid OTP
        500:
          description: Internal server error

  /api/v1/users/logout:
    post:
      tags:
        - "Users"
      summary: Logout user
      description: Logs out the user and invalidates the session. Requires valid JWT token.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
        401:
          description: Unauthorized, invalid or missing token

  /api/v1/users/refresh-token:
    post:
      tags:
        - "Users"
      summary: Refresh access token
      description: Refreshes the user's access token using the refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The user's refresh token
                  example: some-refresh-token-value
      responses:
        200:
          description: New access token generated
        401:
          description: Invalid or expired refresh token
        500:
          description: Internal server error

  /api/v1/users/register/verifyOTP/resendOTPCode:
    post:
      tags:
        - "Users"
      summary: Resend OTP code for email verification
      description: Resends the OTP code for email verification during registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
      responses:
        200:
          description: OTP resent successfully
        400:
          description: Invalid email or error in resending OTP

  /api/v1/users/login/phone:
    post:
      tags:
        - "Users"
      summary: Login with phone number
      description: Logs in the user using their phone number.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contact:
                  type: string
                  description: The user's phone number
                  example: +1234567890
                otp:
                  type: string
                  description: The OTP sent to the user's phone number
                  example: 123456
      responses:
        200:
          description: Login successful, returns access and refresh tokens
        401:
          description: Invalid credentials or OTP

  /api/v1/users/emailResetPassword:
    post:
      tags:
        - "Users"
      summary: Reset password via email
      description: Resets the user's password via email and sends a reset link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
      responses:
        200:
          description: Password reset email sent successfully
        400:
          description: Invalid email or error in sending reset email

  /api/v1/users/register/sendMobileOTP:
    post:
      tags:
        - "Users"
      summary: Send OTP to mobile for registration
      description: Sends an OTP to the user's mobile phone for registration verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contact:
                  type: string
                  description: The user's phone number
                  example: +1234567890
      responses:
        200:
          description: OTP sent successfully
        400:
          description: Invalid phone number or error in sending OTP

  /api/v1/users/register/verifyMobileOTP:
    post:
      tags:
        - "Users"
      summary: Verify mobile OTP for registration
      description: Verifies the OTP sent to the user's mobile phone for registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contact:
                  type: string
                  description: The user's phone number
                  example: +1234567890
                otp:
                  type: string
                  description: The OTP sent to the user's phone
                  example: 123456
      responses:
        200:
          description: Mobile OTP verified successfully
        400:
          description: Invalid OTP
        500:
          description: Internal server error

  /api/v1/admin/addPuja:
    post:
      tags:
        - "Admin"
      summary: Add a new puja.
      description: Adds a new puja to the system with details like name, description, price, and duration.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pujaName:
                  type: string
                  description: Name of the puja
                baseFare:
                  type: number
                  description: Base fare for the puja
                category:
                  type: string
                  description: Category of the puja
                duration:
                  type: string
                  description: Duration of the puja
                description:
                  type: string
                  description: Detailed description of the puja
                pujaImage:
                  type: string
                  format: binary
                  description: Image file of the puja
      responses:
        "201":
          description: Puja added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/admin/editPuja/{id}:
    patch:
      tags:
        - "Admin"
      summary: Edit an existing Puja.
      description: Fetches the details of a user by their unique ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Puja to edit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pujaName:
                  type: string
                  description: Updated name of the puja
                baseFare:
                  type: number
                  description: Updated base fare for the puja
                category:
                  type: string
                  description: Updated category of the puja
                duration:
                  type: string
                  description: Updated duration of the puja
                description:
                  type: string
                  description: Updated detailed description of the puja
                pujaImage:
                  type: string
                  format: binary
                  description: New image file of the puja (optional)
      responses:
        "200":
          description: Puja details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Puja not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /api/v1/admin/deletePuja/{id}:
    delete:
      tags:
        - "Admin"
      summary: Delete a Puja by ID
      description: Deletes a user from the system by their unique ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Puja to delete
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Puja deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Puja not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code of the response
          example: 200
        data:
          type: object
          description: The data payload of the response
          example:
            id: 123
            name: "Sample Data"
        message:
          type: string
          description: Response message
          example: Success
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: true
    ApiError:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code of the error
        message:
          type: string
          description: Error message providing more details
          example: Something went wrong
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        errors:
          type: array
          description: List of detailed error messages
          items:
            type: string
        stack:
          type: string
          description: Stack trace of the error (optional)
          example: |
            Error: Something went wrong
                at Function.<anonymous> (app.js:10:12)
