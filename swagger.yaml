openapi: 3.0.0
info:
  title: Purohit API
  description: API documentation for Purohit application.
  version: 1.0.0
  contact:
    name: Purohit Team
    email: Purohit@gmail.com
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: "Users"
    description: "Operations related to user registration, login, and OTP management"
  - name: "Admin"
    description: "Operations related to admin user management and control"
  - name: "KYP"
    description: "Operations related to KYP form filling, viewing and verification"
  - name: "Booking"
    description: "Operations related to booking pujas "
  - name: "Notification"
    description: "Operations related to  managing notifications"
  - name: "Review"
    description: "Operations related to  review and rating"

paths:
  /api/v1/users/register:
    post:
      tags:
        - "Users"
      summary: Register a new user
      description: Registers a new user with first name, last name, email, password, and contact.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The user's first name
                  example: John
                lastName:
                  type: string
                  description: The user's last name
                  example: Doe
                email:
                  type: string
                  description: The user's email address (optional)
                  example: johndoe@example.com
                password:
                  type: string
                  description: The user's password (optional for Google login)
                  example: password123
                contact:
                  type: string
                  description: The user's phone number (optional)
                  example: +1234567890
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input or missing required fields
        500:
          description: Internal server error

  /api/v1/users/auth/google:
    get:
      tags:
        - "Users"
      summary: Initiate Google OAuth login
      description: Redirects to Google OAuth for user authentication
      responses:
        302:
          description: Redirect to Google OAuth

  /api/v1/users/auth/google/callback:
    get:
      tags:
        - "Users"
      summary: Google OAuth callback
      description: Callback route after Google OAuth authentication
      responses:
        200:
          description: User authenticated via Google
        401:
          description: Unauthorized, Google authentication failed

  /api/v1/users/login:
    post:
      tags:
        - "Users"
      summary: Login user with username/email and password
      description: Logs in the user by providing the username/email and password. If credentials are valid, returns access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                password:
                  type: string
                  description: The user's password
                  example: password123
      responses:
        200:
          description: Login successful, returns access and refresh tokens
        401:
          description: Invalid credentials
        500:
          description: Internal server error

  /api/v1/users/register/sendEmailOTP:
    post:
      tags:
        - "Users"
      summary: Send OTP to email for registration
      description: Sends an OTP to the user's email for registration verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                token:
                  type: string
                  description: The token given during registration.
      responses:
        200:
          description: OTP sent successfully
        400:
          description: Invalid email or server error

  /api/v1/users/register/verifyOTP:
    post:
      tags:
        - "Users"
      summary: Verify OTP for registration
      description: Verifies the OTP sent to the user's email for registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                otp:
                  type: string
                  description: The OTP sent to the user's email
                  example: 123456
      responses:
        200:
          description: OTP verified successfully
        400:
          description: Invalid OTP
        500:
          description: Internal server error

  /api/v1/users/logout:
    post:
      tags:
        - "Users"
      summary: Logout user
      description: Logs out the user and invalidates the session. Requires valid JWT token.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
        401:
          description: Unauthorized, invalid or missing token

  /api/v1/users/getCurrentUser:
    get:
      tags:
        - "Users"
      summary: Get the current logged-in user
      description: Fetches the details of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully fetched the current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "60d23d8f1d4b3e256b6432d3"
                      username:
                        type: string
                        example: "john_doe"
                      email:
                        type: string
                        example: "john_doe@example.com"
                  message:
                    type: string
                    example: "Current user fetched successfully"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: "User not authenticated"

  /api/v1/users/refresh-token:
    post:
      tags:
        - "Users"
      summary: Refresh access token
      description: Refreshes the user's access token using the refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The user's refresh token
                  example: some-refresh-token-value
      responses:
        200:
          description: New access token generated
        401:
          description: Invalid or expired refresh token
        500:
          description: Internal server error

  /api/v1/users/register/verifyOTP/resendOTPCode:
    post:
      tags:
        - "Users"
      summary: Resend OTP code for email verification
      description: Resends the OTP code for email verification during registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
      responses:
        200:
          description: OTP resent successfully
        400:
          description: Invalid email or error in resending OTP

  /api/v1/users/profileImage:
    patch:
      summary: Add or update the profile image for the user
      description: This endpoint allows the user to either add a new profile image or update an existing one.
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: The profile image file to upload.
      responses:
        "200":
          description: Profile image handled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Profile image handled successfully.
        "400":
          description: Avatar file is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Avatar file is required.
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found.
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred.

  /api/v1/users/coverImage:
    patch:
      summary: Add or update user's cover image
      description: Allows a user to upload or update their cover image. The new image will replace any existing cover photo.
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The new cover photo to be uploaded.
      responses:
        "200":
          description: Cover image handled successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                  message:
                    type: string
                    example: Cover image handled successfully.
        "400":
          description: Bad Request - Cover file missing or user update failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Not Found - User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/users/updateAccountDetails:
    patch:
      summary: Update user account details
      description: Allows authenticated users to update their first name, last name, and bio.
      tags:
        - "Users"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                  description: Updated first name of the user
                lastName:
                  type: string
                  example: Doe
                  description: Updated last name of the user
                bio:
                  type: string
                  example: Software developer passionate about AI and climate tech.
                  description: A brief bio of the user
              required:
                - firstName
                - lastName
      responses:
        "200":
          description: Account details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request, invalid or missing input fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/users/updatePassword:
    patch:
      summary: Update user password
      description: Allows authenticated users to update their password by providing the old password.
      tags:
        - "Users"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: old_password123
                  description: The current password of the user
                newPassword:
                  type: string
                  example: new_secure_password
                  description: The new password to set for the account
                confirmPassword:
                  type: string
                  example: new_secure_password
                  description: Confirm the new password to ensure they match
              required:
                - oldPassword
                - newPassword
                - confirmPassword
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request, validation failed (e.g., passwords do not match)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  # /api/v1/users/login/phone:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Login with phone number
  #     description: Logs in the user using their phone number.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               contact:
  #                 type: string
  #                 description: The user's phone number
  #                 example: +1234567890
  #               otp:
  #                 type: string
  #                 description: The OTP sent to the user's phone number
  #                 example: 123456
  #     responses:
  #       200:
  #         description: Login successful, returns access and refresh tokens
  #       401:
  #         description: Invalid credentials or OTP

  # /api/v1/users/emailResetPassword:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Reset password via email
  #     description: Resets the user's password via email and sends a reset link.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #                 description: The user's email address
  #                 example: johndoe@example.com
  #     responses:
  #       200:
  #         description: Password reset email sent successfully
  #       400:
  #         description: Invalid email or error in sending reset email

  # /api/v1/users/register/sendMobileOTP:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Send OTP to mobile for registration
  #     description: Sends an OTP to the user's mobile phone for registration verification.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               contact:
  #                 type: string
  #                 description: The user's phone number
  #                 example: +1234567890
  #     responses:
  #       200:
  #         description: OTP sent successfully
  #       400:
  #         description: Invalid phone number or error in sending OTP

  # /api/v1/users/register/verifyMobileOTP:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Verify mobile OTP for registration
  #     description: Verifies the OTP sent to the user's mobile phone for registration.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               contact:
  #                 type: string
  #                 description: The user's phone number
  #                 example: +1234567890
  #               otp:
  #                 type: string
  #                 description: The OTP sent to the user's phone
  #                 example: 123456
  #     responses:
  #       200:
  #         description: Mobile OTP verified successfully
  #       400:
  #         description: Invalid OTP
  #       500:
  #         description: Internal server error

  /api/v1/admin/addPuja:
    post:
      tags:
        - "Admin"
      summary: Add a new puja.
      description: Adds a new puja to the system with details like name, description, price, and duration.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pujaName:
                  type: string
                  description: Name of the puja
                baseFare:
                  type: number
                  description: Base fare for the puja
                category:
                  type: string
                  description: Category of the puja
                duration:
                  type: string
                  description: Duration of the puja
                description:
                  type: string
                  description: Detailed description of the puja
                pujaImage:
                  type: string
                  format: binary
                  description: Image file of the puja
      responses:
        "201":
          description: Puja added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/admin/editPuja/{id}:
    patch:
      tags:
        - "Admin"
      summary: Edit an existing Puja.
      description: Fetches the details of a user by their unique ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Puja to edit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pujaName:
                  type: string
                  description: Updated name of the puja
                baseFare:
                  type: number
                  description: Updated base fare for the puja
                category:
                  type: string
                  description: Updated category of the puja
                duration:
                  type: string
                  description: Updated duration of the puja
                description:
                  type: string
                  description: Updated detailed description of the puja
                pujaImage:
                  type: string
                  format: binary
                  description: New image file of the puja (optional)
      responses:
        "200":
          description: Puja details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Puja not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/admin/getPujas:
    get:
      tags:
        - "Admin"
      summary: Get a list of pujas with filtering and pagination
      description: Fetches a list of pujas with optional filtering based on category, price range, and duration. Pagination is also supported.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: The page number for pagination (default is 1)
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: The number of results per page (default is 10)
          required: false
          schema:
            type: integer
            example: 10
        - name: category
          in: query
          description: The category of the puja to filter by
          required: false
          schema:
            type: string
            example: "Hindu"
        - name: minPrice
          in: query
          description: The minimum price of the puja to filter by
          required: false
          schema:
            type: number
            example: 100
        - name: maxPrice
          in: query
          description: The maximum price of the puja to filter by
          required: false
          schema:
            type: number
            example: 1000
        - name: minDuration
          in: query
          description: The minimum duration of the puja to filter by
          required: false
          schema:
            type: string
            example: "1 hour"
        - name: maxDuration
          in: query
          description: The maximum duration of the puja to filter by
          required: false
          schema:
            type: string
            example: "2 hours"
      responses:
        200:
          description: Successfully fetched the filtered and paginated list of pujas
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      pujas:
                        type: array
                        items:
                          type: object
                          properties:
                            pujaId:
                              type: string
                              example: "60d23d8f1d4b3e256b6432d3"
                            pujaName:
                              type: string
                              example: "Lakshmi Puja"
                            category:
                              type: string
                              example: "Hindu"
                            baseFare:
                              type: number
                              example: 500
                            duration:
                              type: string
                              example: "1.5 hours"
                            description:
                              type: string
                              example: "A ritual for the worship of Goddess Lakshmi."
                      totalPujas:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
                      currentPage:
                        type: integer
                        example: 1
                  message:
                    type: string
                    example: "Filtered Pujas"
        400:
          description: Bad request, invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: "Invalid query parameters"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: "Internal server error"

  /api/v1/admin/getSpecificPuja/{id}:
    get:
      tags:
        - "Admin"
      summary: Get a specific puja by ID
      description: Fetches the details of a puja by its unique ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 64b7d85a8b541a0012345678
          description: The ID of the Puja to fetch
      responses:
        "200":
          description: Puja found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid Mongo id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Puja not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/admin/deletePuja/{id}:
    delete:
      tags:
        - "Admin"
      summary: Delete a Puja by ID
      description: Deletes a user from the system by their unique ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Puja to delete
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Puja deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Puja not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/admin/searchPuja:
    get:
      summary: Search for pujas by name
      description: Retrieve a list of pujas matching a query string.
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          description: The query string (i.e Puja name) to search for pujas
          required: true
          schema:
            type: string
            example: "Ghar Shanti"
      responses:
        "200":
          description: Pujas found matching the query string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60d21b4667d0d8992e610c85
                        pujaName:
                          type: string
                          example: Ganesh Chaturthi Puja
                        description:
                          type: string
                          example: A ritual to honor Lord Ganesha.
                  message:
                    type: string
                    example: Pujas found matching the query string
        "400":
          description: Query string is missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Query is required
        "404":
          description: No pujas found matching the query string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  data:
                    type: array
                    items:
                      type: object
                  message:
                    type: string
                    example: No pujas found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal server error

  /api/v1/admin/getAllPanditUsers:
    get:
      summary: Get all users with isPandit set to true
      description: Fetches all users where the isPandit field is true.
      tags:
        - Admin
      responses:
        "200":
          description: Successfully fetched all pandit users
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "6424a5781234abcd5678efgh"
                        name:
                          type: string
                          example: "John Doe"
                        isPandit:
                          type: boolean
                          example: true
                  message:
                    type: string
                    example: "Pandits Fetched successfully."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Internal Server Error"
                  error:
                    type: string
                    example: "Failed to fetch pandit users."

  /api/v1/admin/getTop5Pandits:
    get:
      summary: Get Top 5 Pandits
      tags:
        - Admin
      description: Fetch the top 5 pandits based on average rating and review count.
      responses:
        200:
          description: Top 5 pandits fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60f6b4f7b5a7e1a4b8d6e7c2
                        firstName:
                          type: string
                          example: Ramesh
                        lastName:
                          type: string
                          example: Pandit
                        avatar:
                          type: string
                          example: https://example.com/avatar.jpg
                        bio:
                          type: string
                          example: Experienced pandit with 10 years of service.
                        averageRating:
                          type: number
                          example: 4.8
                        reviewCount:
                          type: integer
                          example: 25
                  message:
                    type: string
                    example: Top 5 Pandits fetched successfully.

  /api/v1/admin/getTop5Pujas:
    get:
      summary: Get Top 5 Pujas
      tags:
        - Admin
      description: Fetch the top 5 pujas based on the number of completed bookings.
      responses:
        200:
          description: Top 5 pujas fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60f6b4f7b5a7e1a4b8d6e7c3
                        pujaName:
                          type: string
                          example: Satyanarayan Puja
                        pujaImage:
                          type: string
                          example: https://example.com/puja.jpg
                        category:
                          type: string
                          example: Puja
                        baseFare:
                          type: number
                          example: 1500
                        description:
                          type: string
                          example: A traditional puja for prosperity and peace.
                        bookingCount:
                          type: integer
                          example: 50
                  message:
                    type: string
                    example: Top 5 Pujas fetched successfully.

  /api/v1/admin/getTotalBookings:
    get:
      summary: Get Total Bookings
      tags:
        - Admin
      description: Fetch the total number of bookings.
      responses:
        200:
          description: Total bookings fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      totalBookings:
                        type: integer
                        example: 200
                  message:
                    type: string
                    example: Total bookings fetched successfully.

  /api/v1/kyp/fillKYP:
    post:
      summary: Fill KYP form for Pandit registration
      tags:
        - KYP
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  description: Pandit's phone number
                day:
                  type: integer
                  description: Day of birth
                month:
                  type: integer
                  description: Month of birth
                year:
                  type: integer
                  description: Year of birth
                province:
                  type: string
                  description: Temporary address province
                district:
                  type: string
                  description: Temporary address district
                municipality:
                  type: string
                  description: Temporary address municipality
                tolAddress:
                  type: string
                  description: Temporary address tol
                pmProvince:
                  type: string
                  description: Permanent address province
                pmDistrict:
                  type: string
                  description: Permanent address district
                pmMun:
                  type: string
                  description: Permanent address municipality
                pmToladdress:
                  type: string
                  description: Permanent address tol
                qualification:
                  type: string
                  description: Qualification details
                experience:
                  type: string
                  description: Experience details
                institution:
                  type: string
                  description: Institution details
                qcertificate:
                  type: string
                  format: binary
                  description: Qualification certificate document
                citizenshipFrontPhoto:
                  type: string
                  format: binary
                  description: Front photo of citizenship document
                citizenshipBackPhoto:
                  type: string
                  format: binary
                  description: Back photo of citizenship document
      responses:
        200:
          description: KYP form successfully filled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []

  /api/v1/kyp/viewAllKYP:
    post:
      summary: View all KYPs with pagination
      tags:
        - KYP
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items per page
      responses:
        200:
          description: List of all KYPs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []

  /api/v1/kyp/updateKYP/{kpyID}:
    patch:
      summary: Update a KYP entry
      description: Allows updating an existing KYP entry, including partial updates for specific fields or documents.
      tags:
        - KYP
      parameters:
        - in: path
          name: kpyID
          required: true
          schema:
            type: string
          description: The ID of the KYP entry to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  description: Updated phone number.
                  example: "9876543210"
                day:
                  type: integer
                  description: Updated day of birth.
                  example: 1
                month:
                  type: integer
                  description: Updated month of birth.
                  example: 1
                year:
                  type: integer
                  description: Updated year of birth.
                  example: 2000
                province:
                  type: string
                  description: Updated temporary province.
                  example: "Province 1"
                district:
                  type: string
                  description: Updated temporary district.
                  example: "District A"
                municipality:
                  type: string
                  description: Updated temporary municipality.
                  example: "Municipality X"
                tolAddress:
                  type: string
                  description: Updated temporary tol address.
                  example: "Tol Address Y"
                pmProvince:
                  type: string
                  description: Updated permanent province.
                  example: "Province 2"
                pmDistrict:
                  type: string
                  description: Updated permanent district.
                  example: "District B"
                pmMun:
                  type: string
                  description: Updated permanent municipality.
                  example: "Municipality Y"
                pmToladdress:
                  type: string
                  description: Updated permanent tol address.
                  example: "Tol Address Z"
                qualification:
                  type: string
                  description: Updated qualification.
                  example: "Bachelor's"
                experience:
                  type: string
                  description: Updated experience.
                  example: "5 years"
                institution:
                  type: string
                  description: Updated institution.
                  example: "XYZ University"
          multipart/form-data:
            schema:
              type: object
              properties:
                qcertificate:
                  type: string
                  format: binary
                  description: New qualification certificate.
                citizenshipFrontPhoto:
                  type: string
                  format: binary
                  description: New citizenship front photo.
                citizenshipBackPhoto:
                  type: string
                  format: binary
                  description: New citizenship back photo.
      responses:
        "200":
          description: Successfully updated the KYP entry.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid input or bad request.
        "404":
          description: KYP entry not found.
        "500":
          description: Server error.

  /api/v1/kyp/getKYPStatus:
    get:
      summary: Get KYP status
      description: Retrieves the current user's KYP entry status.
      tags:
        - KYP
      responses:
        "200":
          description: Successfully fetched the KYP status.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KYP"
        "400":
          description: Invalid request.
        "404":
          description: KYP entry not found.
        "500":
          description: Server error.

  /api/v1/kyp/viewKYP/{id}:
    post:
      summary: View a specific KYP by ID
      tags:
        - KYP
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: KYP ID
      responses:
        200:
          description: Details of the specified KYP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []

  /api/v1/kyp/updateKYPStatus/{id}:
    patch:
      summary: Update the status of a KYP request
      description: Updates the KYP request status and notifies the user accordingly.
      tags:
        - KYP
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the KYP request to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "status"
              properties:
                status:
                  type: string
                  enum: [Accepted, Rejected]
                  description: The new status of the KYP request
                message:
                  type: string
                  description: The reason for rejection (if applicable)
      responses:
        "200":
          description: KYP status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    $ref: "#/components/schemas/KYP"
                  message:
                    type: string
                    example: "KYP status updated"
        "400":
          description: Bad request due to invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: KYP request or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/booking/bookings/{pujaId}:
    post:
      tags:
        - "Booking"
      summary: Create a new booking
      description: Creates a booking for a specific puja.
      parameters:
        - name: pujaId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the puja to book.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
                - time
                - province
                - district
                - municipality
                - tollAddress
              properties:
                date:
                  type: string
                  format: date
                  example: "2025-01-22"
                time:
                  type: string
                  example: "10:00 AM"
                province:
                  type: string
                  example: "Province 1"
                district:
                  type: string
                  example: "Sunsari"
                municipality:
                  type: string
                  example: "Dharan"
                tollAddress:
                  type: string
                  example: "Near Bhanuchowk"
      responses:
        "201":
          description: Booking successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      userID:
                        type: string
                      pujaID:
                        type: string
                      date:
                        type: string
                        format: date
                      time:
                        type: string
                      location:
                        type: object
                        properties:
                          province:
                            type: string
                          district:
                            type: string
                          municipality:
                            type: string
                          tollAddress:
                            type: string
        "400":
          description: Missing required fields or booking already exists
        "401":
          description: Unauthorized user
        "404":
          description: Puja or pandits not found
        "500":
          description: Failed to send notifications

  /api/v1/booking/bookings/viewBooking:
    get:
      summary: View user bookings
      tags:
        - "Booking"
      description: Retrieves a list of bookings for the authenticated user with pagination.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of bookings per page.
      responses:
        "200":
          description: Bookings retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Bookings retrieved successfully.
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            userID:
                              type: string
                            pujaID:
                              type: object
                            date:
                              type: string
                            time:
                              type: string
                            location:
                              type: object
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalBookings:
                        type: integer
        "401":
          description: Unauthorized user.

  /api/v1/booking/bookings/viewPanditBooking:
    get:
      summary: View pandit bookings
      tags:
        - "Booking"
      description: Retrieves a list of bookings for a pandit where they are selected.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of bookings per page.
      responses:
        "200":
          description: Bookings retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Bookings retrieved successfully.
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            pujaID:
                              type: object
                            selectedPandit:
                              type: array
                              items:
                                type: string
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalBookings:
                        type: integer
        "401":
          description: Unauthorized user.

  /api/v1/booking/notifications:
    get:
      summary: View notifications
      tags:
        - "Notification"
      description: Retrieves a paginated list of notifications for the authenticated user.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: The page number for pagination.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: The number of notifications per page.
      responses:
        "200":
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            senderDetails:
                              type: object
                            bookingDetails:
                              type: object
                            pujaDetails:
                              type: object
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalNotifications:
                            type: integer
                          limit:
                            type: integer
        "401":
          description: Unauthorized user
        "500":
          description: Failed to retrieve notifications

  /api/v1/booking/notifications/mark-all-as-read:
    put:
      summary: Mark all notifications as read
      tags:
        - "Notification"
      description: Marks all unread notifications for the authenticated user as read.
      responses:
        "200":
          description: Notifications marked as read successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      result:
                        type: object
                        properties:
                          matchedCount:
                            type: integer
                          modifiedCount:
                            type: integer
        "401":
          description: Unauthorized user
        "500":
          description: Failed to mark notifications

  /api/v1/booking/notifications/accept/{notificationId}:
    put:
      summary: Accept a notification
      tags:
        - "Notification"
      description: Accepts a specific notification and updates its status to "Accepted."
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the notification to accept.
      responses:
        "200":
          description: Notification accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      status:
                        type: string
        "400":
          description: Notification already accepted or declined
        "401":
          description: Unauthorized user
        "404":
          description: Notification or booking not found
        "500":
          description: Failed to accept notification

  /api/v1/booking/bookings/{bookingId}/accepted-pandits:
    get:
      summary: Get accepted pandits for a booking
      tags:
        - "Booking"
      description: Retrieves a list of pandits who have accepted the booking.
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the booking.
      responses:
        "200":
          description: Accepted pandits retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        firstName:
                          type: string
                        lastName:
                          type: string
        "401":
          description: Unauthorized user
        "403":
          description: Unauthorized access to booking
        "404":
          description: Booking not found
        "500":
          description: Failed to retrieve accepted pandits

  /api/v1/booking/notifications/reject/{notificationId}:
    put:
      summary: Reject a booking notification
      tags:
        - "Notification"
      description: Rejects a specific notification and updates its status to "Rejected."
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the notification to reject.
      responses:
        "200":
          description: Notification rejected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      status:
                        type: string
        "400":
          description: Notification already accepted or declined
        "401":
          description: Unauthorized user
        "404":
          description: Notification or booking not found
        "500":
          description: Failed to reject notification

  /api/v1/booking/bookings/accepted-pandits/choosePandit:
    post:
      summary: Choose a pandit for a booking
      tags:
        - "Booking"
      description: Allows a user to select a specific pandit for their booking.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
                - panditId
              properties:
                bookingId:
                  type: string
                  description: ID of the booking.
                  example: "64bd10af23755c36d887cd10"
                panditId:
                  type: string
                  description: ID of the pandit to select.
                  example: "64bd10af23755c36d887cd11"
      responses:
        "200":
          description: Pandit selected successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Pandit selected successfully.
                  data:
                    type: object
        "400":
          description: Pandit not among the ones who accepted or already selected.
        "403":
          description: Unauthorized access.
        "404":
          description: Booking not found.

  /api/v1/booking/bookings/accepted-pandits/rejectPandit:
    post:
      summary: Reject a Pandit for a Booking
      description: Reject a pandit who has previously accepted the booking.
      tags:
        - Booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                  description: The ID of the booking.
                panditId:
                  type: string
                  description: The ID of the pandit to reject.
              required:
                - bookingId
                - panditId
      responses:
        "200":
          description: Pandit rejected successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                    description: Response data (empty object).
                  message:
                    type: string
                    example: Pandit rejected successfully.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  error:
                    type: string
                    example: Both bookingId and panditId are required.
        "403":
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 403
                  error:
                    type: string
                    example: Unauthorized access.
        "404":
          description: Booking not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  error:
                    type: string
                    example: Booking not found.
      security:
        - bearerAuth: []

  /api/v1/booking/bookings/checkPoojaBookingStatus/{poojaId}:
    get:
      summary: Check if a user has booked a specific pooja
      tags:
        - "Booking"
      description: Returns the booking status of a specific pooja for the logged-in user.
      parameters:
        - in: path
          name: poojaId
          required: true
          schema:
            type: string
          description: The ID of the pooja to check booking status for.
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for user authentication.
      responses:
        "200":
          description: Booking status retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasBooked:
                    type: boolean
                    description: Whether the user has already booked the pooja.
                  message:
                    type: string
                    description: A message describing the booking status.
        "400":
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
        "401":
          description: Unauthorized access. User is not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authentication error message.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Server error message.

  /api/v1/booking/bookings/pujaStatusUpdate/{bookingId}:
    put:
      summary: Update the status of a Puja booking to 'Completed'.
      tags:
        - "Booking"
      security:
        - BearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Booking status updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bookings Completed successfully.
        400:
          description: Booking already completed or invalid status update.
        403:
          description: Unauthorized to update the booking status.

  /api/v1/booking/bookings/cancelBooking/{bookingId}:
    put:
      summary: Cancel a booking
      description: Cancels a booking by updating its status to "Cancelled".
      tags:
        - Bookings
      parameters:
        - name: bookingId
          in: path
          required: true
          description: ID of the booking to be cancelled
          schema:
            type: string
      responses:
        200:
          description: Booking cancelled successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Booking cancelled successfully.
        400:
          description: Bad request - Booking is already completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Booking is already Completed
        404:
          description: Booking not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: Booking not found

  /api/v1/booking/panditDetails/{panditId}:
    put:
      summary: Retrieve details of a Pandit
      tags:
        - "Bookings"
      description: Returns the total number of completed Pujas, reviews, average ratings, and total raters for a specific Pandit.
      parameters:
        - in: path
          name: panditId
          required: true
          description: The ID of the Pandit to retrieve details for
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Successful retrieval of Pandit details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      totalPujas:
                        type: integer
                        example: 50
                      avegrageRating:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "60c72b2f9f1b2c001f8c3a62"
                          averageRating:
                            type: number
                            format: float
                            example: 4.5
                          totalReviews:
                            type: integer
                            example: 100
                      totalRaters:
                        type: integer
                        example: 80
                      totalReviews:
                        type: integer
                        example: 100
                  message:
                    type: string
                    example: "Booking information retrieved."
        "400":
          description: Bad Request, invalid panditId
        "404":
          description: Pandit not found
        "500":
          description: Internal Server Error

  /api/v1/review/addReview:
    post:
      summary: Add a new review for a Pandit.
      tags:
        - "Review"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                panditId:
                  type: string
                  format: uuid
                  description: ID of the Pandit being reviewed.
                pujaId:
                  type: string
                  format: uuid
                  description: ID of the Puja related to the review.
                bookingId:
                  type: string
                  format: uuid
                  description: ID of the booking.
                rating:
                  type: number
                  format: float
                  description: Rating between 1 to 5.
                reviewText:
                  type: string
                  description: Review text.
      responses:
        201:
          description: Review submitted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        400:
          description: Bad request (e.g., booking not completed, already reviewed, invalid ID).
        403:
          description: Unauthorized to review.

  /api/v1/review/getPanditReviews/{panditId}:
    put:
      summary: Get all reviews for a specific Pandit with pagination.
      tags:
        - "Review"
      security:
        - BearerAuth: []
      parameters:
        - name: panditId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Reviews retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: "#/components/schemas/Review"
                  pagination:
                    type: object
                    properties:
                      totalReviews:
                        type: integer
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
        400:
          description: Invalid Pandit ID.

  /api/v1/review/getAverageRating/{panditId}:
    put:
      summary: Get the average rating for a specific Pandit.
      tags:
        - "Review"
      security:
        - BearerAuth: []
      parameters:
        - name: panditId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Average rating retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  averageRating:
                    type: string
                    description: Average rating rounded to 2 decimal places.
                  totalReviews:
                    type: integer
                    description: Total number of reviews.
        400:
          description: Invalid Pandit ID.

  /api/v1/review/checkReviewed/{panditId}:
    put:
      summary: Check if the user has reviewed a Pandit
      description: This endpoint checks whether the authenticated user has already reviewed a specific Pandit.
      tags:
        - Review
      parameters:
        - in: path
          name: panditId
          required: true
          schema:
            type: string
          description: The ID of the Pandit to check for reviews.
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
          description: The ID of the booking to check for reviews.
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for user authentication.
      responses:
        "200":
          description: Successfully checked review status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviewed:
                    type: boolean
                    description: Indicates if the user has already reviewed the Pandit.
                  data:
                    type: object
                    nullable: true
                    description: The existing review data if available.
                  message:
                    type: string
                    example: "User has already reviewed this Pandit."
        "401":
          description: Unauthorized. User must be logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error."
                  error:
                    type: string

security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code of the response
          example: 200
        data:
          type: object
          description: The data payload of the response
          example:
            id: 123
            name: "Sample Data"
        message:
          type: string
          description: Response message
          example: Success
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: true
    ApiError:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code of the error
        message:
          type: string
          description: Error message providing more details
          example: Something went wrong
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        errors:
          type: array
          description: List of detailed error messages
          items:
            type: string
        stack:
          type: string
          description: Stack trace of the error (optional)
          example: |
            Error: Something went wrong
                at Function.<anonymous> (app.js:10:12)
