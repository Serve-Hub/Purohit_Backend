openapi: 3.0.0
info:
  title: Purohit API
  description: API documentation for Purohit application.
  version: 1.0.0
  contact:
    name: Purohit Team
    email: Purohit@gmail.com
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: "Users"
    description: "Operations related to user registration, login, and OTP management"
  - name: "Admin"
    description: "Operations related to admin user management and control"
  - name: "KYP"
    description: "Operations related to KYP form filling, viewing and verification"
  - name: "Booking"
    description: "Operations related to booking pujas and managing notifications"
paths:
  /api/v1/users/register:
    post:
      tags:
        - "Users"
      summary: Register a new user
      description: Registers a new user with first name, last name, email, password, and contact.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The user's first name
                  example: John
                lastName:
                  type: string
                  description: The user's last name
                  example: Doe
                email:
                  type: string
                  description: The user's email address (optional)
                  example: johndoe@example.com
                password:
                  type: string
                  description: The user's password (optional for Google login)
                  example: password123
                contact:
                  type: string
                  description: The user's phone number (optional)
                  example: +1234567890
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input or missing required fields
        500:
          description: Internal server error

  /api/v1/users/auth/google:
    get:
      tags:
        - "Users"
      summary: Initiate Google OAuth login
      description: Redirects to Google OAuth for user authentication
      responses:
        302:
          description: Redirect to Google OAuth

  /api/v1/users/auth/google/callback:
    get:
      tags:
        - "Users"
      summary: Google OAuth callback
      description: Callback route after Google OAuth authentication
      responses:
        200:
          description: User authenticated via Google
        401:
          description: Unauthorized, Google authentication failed

  /api/v1/users/login:
    post:
      tags:
        - "Users"
      summary: Login user with username/email and password
      description: Logs in the user by providing the username/email and password. If credentials are valid, returns access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                password:
                  type: string
                  description: The user's password
                  example: password123
      responses:
        200:
          description: Login successful, returns access and refresh tokens
        401:
          description: Invalid credentials
        500:
          description: Internal server error

  /api/v1/users/register/sendEmailOTP:
    post:
      tags:
        - "Users"
      summary: Send OTP to email for registration
      description: Sends an OTP to the user's email for registration verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                token:
                  type: string
                  description: The token given during registration.
      responses:
        200:
          description: OTP sent successfully
        400:
          description: Invalid email or server error

  /api/v1/users/register/verifyOTP:
    post:
      tags:
        - "Users"
      summary: Verify OTP for registration
      description: Verifies the OTP sent to the user's email for registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
                otp:
                  type: string
                  description: The OTP sent to the user's email
                  example: 123456
      responses:
        200:
          description: OTP verified successfully
        400:
          description: Invalid OTP
        500:
          description: Internal server error

  /api/v1/users/logout:
    post:
      tags:
        - "Users"
      summary: Logout user
      description: Logs out the user and invalidates the session. Requires valid JWT token.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
        401:
          description: Unauthorized, invalid or missing token

  /api/v1/users/getCurrentUser:
    get:
      tags:
        - "Users"
      summary: Get the current logged-in user
      description: Fetches the details of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully fetched the current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "60d23d8f1d4b3e256b6432d3"
                      username:
                        type: string
                        example: "john_doe"
                      email:
                        type: string
                        example: "john_doe@example.com"
                  message:
                    type: string
                    example: "Current user fetched successfully"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: "User not authenticated"

  /api/v1/users/refresh-token:
    post:
      tags:
        - "Users"
      summary: Refresh access token
      description: Refreshes the user's access token using the refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The user's refresh token
                  example: some-refresh-token-value
      responses:
        200:
          description: New access token generated
        401:
          description: Invalid or expired refresh token
        500:
          description: Internal server error

  /api/v1/users/register/verifyOTP/resendOTPCode:
    post:
      tags:
        - "Users"
      summary: Resend OTP code for email verification
      description: Resends the OTP code for email verification during registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: johndoe@example.com
      responses:
        200:
          description: OTP resent successfully
        400:
          description: Invalid email or error in resending OTP
  /api/v1/users/addProfilePicture:
    post:
      summary: Add a profile image for the user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: The profile image file to upload.
      responses:
        "200":
          description: Profile image added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Profile image added successfully.
        "400":
          description: Avatar file is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Avatar file is required.
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found.
  /api/v1/users/updateProfileImage:
    patch:
      summary: Update the profile image for the user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: The new profile image file to upload.
      responses:
        "200":
          description: Profile image updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Profile image updated successfully.
        "400":
          description: Avatar file is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Avatar file is required.
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found.

  # /api/v1/users/login/phone:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Login with phone number
  #     description: Logs in the user using their phone number.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               contact:
  #                 type: string
  #                 description: The user's phone number
  #                 example: +1234567890
  #               otp:
  #                 type: string
  #                 description: The OTP sent to the user's phone number
  #                 example: 123456
  #     responses:
  #       200:
  #         description: Login successful, returns access and refresh tokens
  #       401:
  #         description: Invalid credentials or OTP

  # /api/v1/users/emailResetPassword:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Reset password via email
  #     description: Resets the user's password via email and sends a reset link.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #                 description: The user's email address
  #                 example: johndoe@example.com
  #     responses:
  #       200:
  #         description: Password reset email sent successfully
  #       400:
  #         description: Invalid email or error in sending reset email

  # /api/v1/users/register/sendMobileOTP:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Send OTP to mobile for registration
  #     description: Sends an OTP to the user's mobile phone for registration verification.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               contact:
  #                 type: string
  #                 description: The user's phone number
  #                 example: +1234567890
  #     responses:
  #       200:
  #         description: OTP sent successfully
  #       400:
  #         description: Invalid phone number or error in sending OTP

  # /api/v1/users/register/verifyMobileOTP:
  #   post:
  #     tags:
  #       - "Users"
  #     summary: Verify mobile OTP for registration
  #     description: Verifies the OTP sent to the user's mobile phone for registration.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               contact:
  #                 type: string
  #                 description: The user's phone number
  #                 example: +1234567890
  #               otp:
  #                 type: string
  #                 description: The OTP sent to the user's phone
  #                 example: 123456
  #     responses:
  #       200:
  #         description: Mobile OTP verified successfully
  #       400:
  #         description: Invalid OTP
  #       500:
  #         description: Internal server error

  /api/v1/admin/addPuja:
    post:
      tags:
        - "Admin"
      summary: Add a new puja.
      description: Adds a new puja to the system with details like name, description, price, and duration.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pujaName:
                  type: string
                  description: Name of the puja
                baseFare:
                  type: number
                  description: Base fare for the puja
                category:
                  type: string
                  description: Category of the puja
                duration:
                  type: string
                  description: Duration of the puja
                description:
                  type: string
                  description: Detailed description of the puja
                pujaImage:
                  type: string
                  format: binary
                  description: Image file of the puja
      responses:
        "201":
          description: Puja added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/admin/editPuja/{id}:
    patch:
      tags:
        - "Admin"
      summary: Edit an existing Puja.
      description: Fetches the details of a user by their unique ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Puja to edit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pujaName:
                  type: string
                  description: Updated name of the puja
                baseFare:
                  type: number
                  description: Updated base fare for the puja
                category:
                  type: string
                  description: Updated category of the puja
                duration:
                  type: string
                  description: Updated duration of the puja
                description:
                  type: string
                  description: Updated detailed description of the puja
                pujaImage:
                  type: string
                  format: binary
                  description: New image file of the puja (optional)
      responses:
        "200":
          description: Puja details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Puja not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/admin/getPujas:
    get:
      tags:
        - "Admin"
      summary: Get a list of pujas with filtering and pagination
      description: Fetches a list of pujas with optional filtering based on category, price range, and duration. Pagination is also supported.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: The page number for pagination (default is 1)
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: The number of results per page (default is 10)
          required: false
          schema:
            type: integer
            example: 10
        - name: category
          in: query
          description: The category of the puja to filter by
          required: false
          schema:
            type: string
            example: "Hindu"
        - name: minPrice
          in: query
          description: The minimum price of the puja to filter by
          required: false
          schema:
            type: number
            example: 100
        - name: maxPrice
          in: query
          description: The maximum price of the puja to filter by
          required: false
          schema:
            type: number
            example: 1000
        - name: minDuration
          in: query
          description: The minimum duration of the puja to filter by
          required: false
          schema:
            type: string
            example: "1 hour"
        - name: maxDuration
          in: query
          description: The maximum duration of the puja to filter by
          required: false
          schema:
            type: string
            example: "2 hours"
      responses:
        200:
          description: Successfully fetched the filtered and paginated list of pujas
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      pujas:
                        type: array
                        items:
                          type: object
                          properties:
                            pujaId:
                              type: string
                              example: "60d23d8f1d4b3e256b6432d3"
                            pujaName:
                              type: string
                              example: "Lakshmi Puja"
                            category:
                              type: string
                              example: "Hindu"
                            baseFare:
                              type: number
                              example: 500
                            duration:
                              type: string
                              example: "1.5 hours"
                            description:
                              type: string
                              example: "A ritual for the worship of Goddess Lakshmi."
                      totalPujas:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
                      currentPage:
                        type: integer
                        example: 1
                  message:
                    type: string
                    example: "Filtered Pujas"
        400:
          description: Bad request, invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: "Invalid query parameters"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: "Internal server error"

  /api/v1/admin/deletePuja/{id}:
    delete:
      tags:
        - "Admin"
      summary: Delete a Puja by ID
      description: Deletes a user from the system by their unique ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Puja to delete
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Puja deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Puja not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /api/v1/kyp/fillKYP:
    post:
      summary: Fill KYP form for Pandit registration
      tags:
        - KYP
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  description: Pandit's phone number
                day:
                  type: integer
                  description: Day of birth
                month:
                  type: integer
                  description: Month of birth
                year:
                  type: integer
                  description: Year of birth
                province:
                  type: string
                  description: Temporary address province
                district:
                  type: string
                  description: Temporary address district
                municipality:
                  type: string
                  description: Temporary address municipality
                tolAddress:
                  type: string
                  description: Temporary address tol
                pmProvince:
                  type: string
                  description: Permanent address province
                pmDistrict:
                  type: string
                  description: Permanent address district
                pmMun:
                  type: string
                  description: Permanent address municipality
                pmToladdress:
                  type: string
                  description: Permanent address tol
                qualification:
                  type: string
                  description: Qualification details
                experience:
                  type: string
                  description: Experience details
                institution:
                  type: string
                  description: Institution details
                qcertificate:
                  type: string
                  format: binary
                  description: Qualification certificate document
                citizenshipFrontPhoto:
                  type: string
                  format: binary
                  description: Front photo of citizenship document
                citizenshipBackPhoto:
                  type: string
                  format: binary
                  description: Back photo of citizenship document
      responses:
        200:
          description: KYP form successfully filled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []

  /api/v1/kyp/viewAllKYP:
    post:
      summary: View all KYPs with pagination
      tags:
        - KYP
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items per page
      responses:
        200:
          description: List of all KYPs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []

  /api/v1/kyp/viewKYP/{id}:
    post:
      summary: View a specific KYP by ID
      tags:
        - KYP
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: KYP ID
      responses:
        200:
          description: Details of the specified KYP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []

  /api/v1/kyp/updateKYPStatus/:id:
    put:
      summary: Update the status of a KYP
      tags:
        - KYP
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: KYP ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: New status of the KYP
      responses:
        200:
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []

  /api/v1/booking/createBooking:
    post:
      summary: Create a new booking
      tags:
        - Booking
      description: Create a booking for a specific puja.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pujaId:
                  type: string
                  description: ID of the puja.
                day:
                  type: integer
                  description: Day of the booking.
                month:
                  type: integer
                  description: Month of the booking.
                year:
                  type: integer
                  description: Year of the booking.
                time:
                  type: string
                  description: Time of the booking.
                location:
                  type: string
                  description: Location of the puja.
                amount:
                  type: number
                  description: Amount for the puja.
              required:
                - pujaId
                - day
                - month
                - year
                - time
                - location
                - amount
      responses:
        201:
          description: Booking created successfully.
        400:
          description: Missing or invalid fields.
        401:
          description: Unauthorized access.
        404:
          description: Puja or pandits not found.
        500:
          description: Server error.

  /api/v1/booking/viewNotification:
    get:
      summary: View user notifications
      tags:
        - Booking
      description: Retrieve notifications for the logged-in user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Notifications retrieved successfully.
        401:
          description: Unauthorized access.

  /api/v1/booking/acceptBookingNotification/{notificationId}:
    post:
      summary: Accept a booking notification
      tags:
        - Booking
      description: Accept a booking notification by a pandit.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
          description: ID of the notification.
      responses:
        200:
          description: Booking accepted successfully.
        400:
          description: Notification already accepted or declined.
        404:
          description: Notification or booking not found.

  /api/v1/booking/getAcceptedPandits/{bookingId}:
    post:
      summary: Get accepted pandits
      tags:
        - Booking
      description: Retrieve the list of pandits who have accepted a booking request.
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
          description: ID of the booking.
      responses:
        200:
          description: Accepted pandits retrieved successfully.
        403:
          description: Unauthorized access.
        404:
          description: Booking or accepted pandits not found.

  /api/v1/booking/choosePanditForPuja:
    post:
      summary: Choose a pandit for the puja
      tags:
        - Booking
      description: Select a pandit for the puja from the list of accepted pandits.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                  description: ID of the booking.
                panditId:
                  type: string
                  description: ID of the selected pandit.
              required:
                - bookingId
                - panditId
      responses:
        200:
          description: Pandit selected successfully.
        400:
          description: Pandit not among the accepted ones or already selected.
        403:
          description: Unauthorized access.
        404:
          description: Booking not found.

security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code of the response
          example: 200
        data:
          type: object
          description: The data payload of the response
          example:
            id: 123
            name: "Sample Data"
        message:
          type: string
          description: Response message
          example: Success
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: true
    ApiError:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code of the error
        message:
          type: string
          description: Error message providing more details
          example: Something went wrong
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        errors:
          type: array
          description: List of detailed error messages
          items:
            type: string
        stack:
          type: string
          description: Stack trace of the error (optional)
          example: |
            Error: Something went wrong
                at Function.<anonymous> (app.js:10:12)
